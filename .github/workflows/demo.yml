name: Deploy website
on:
  push:
    branches:
      - main
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Install dependencies
        run: npm ci
      - name: Lint code
        run: npm run lint
      - name: Test code
        run: npm run test
  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      script-file: ${{ steps.publish.outputs.script-file }} # this is how to pass the output of a step to the next job, the output is defined in the publish step, and it is referenced here by its name
    # the output is used to pass the filename of the built JS file to the deploy job
    # the output is defined in the publish step, and it is referenced here by its name
    # script-file is the name of the output variable, it can be anything but must match the name used in the publish step as 'script-file={}'
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Install dependencies
        run: npm ci
      - name: Build website
        run: npm run build
      - name: Publish JS filename
        id: publish # this step is used to find the built JS file and output its filename to the GITHUB_OUTPUT variable, its important because is how it will be founded by whats was asking for script-file: steps.publish.outputs.script-file
        run: find dist/assets/*.js -type f -execdir echo 'script-file={}' >> $GITHUB_OUTPUT ';' # this is a linux command to find all JS files in the dist/assets directory and 
          # output the filename to the GITHUB_OUTPUT variable, which is used to pass data between steps in a job
          # this will be used later in the deploy job to reference the built JS file
          # script-file is the name of the output variable, it can be anything, but it is used to reference the output in the deploy job, it doesnt have to march the filename, this name is choosen to realize that this is the output of the publish step
          # GITHUB_OUTPUT is a special environment variable that is used to pass data between steps in a job, it is a file that is created by GitHub Actions and is used to store the output of a step, the output can be accessed by other steps in the same job or in other jobs
      - name: Upload artifacts  # uploading build artifacts
        uses: actions/upload-artifact@v4  # action to upload artifacts
        with:                     # parameters for the upload
          name: dist-files  # name of the artifact, can be anything, it is used to identify the artifact in the GitHub UI
          path: dist
          #path: |       # paths to the files to upload, the files will be compressed and stored in the artifac
          #  dist
          #  package.json
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get build artifacts # as this job runs on a different runner, we need to download the artifacts from the previous job to use them here
        uses: actions/download-artifact@v4  # action to download artifacts
        with:
          name: dist-files  # name of the artifact to download, must match the name used in the upload step
      - name: Output contents
        run: ls
      - name: Output filename
        run: echo "${{ needs.build.outputs.script-file }}" # this will output the filename of the built JS file, which was passed from the build job
        # needs is used to reference the outputs of the build job, specifically the script-file output, it is a context variable that allows access to the outputs of a job that this job depends on, there are different context and objects variables such as github, runner, env, secrets, and needs
      - name: Deploy
        run: echo "Deploying..."


#Los artefactos en GitHub Actions son archivos o colecciones de archivos producidos durante una ejecución de flujo de trabajo que se pueden almacenar y compartir entre trabajos o después de completar el flujo de trabajo. Estos artefactos pueden contener datos valiosos como resultados de pruebas, informes de cobertura de código, archivos binarios y más.
#Tipos de artefactos:
# Archivos de registro: para depuración y análisis de problemas
# Resultados de pruebas: para evaluar el rendimiento y la calidad del código
# Archivos binarios: para distribuir aplicaciones o bibliotecas compiladas
# Informes y documentación: para compartir información y resultados
# Uso de artefactos:
# Compartir archivos entre trabajos: en el mismo flujo de trabajo o entre diferentes flujos de trabajo
# Almacenar archivos para su posterior uso: después de completar un flujo de trabajo o para futuras referencias
# Crear versiones y lanzamientos: con artefactos asociados para distribuir aplicaciones o bibliotecas
# Ventajas:
# Mejora la colaboración: al compartir archivos y resultados entre miembros del equipo
# Optimiza el flujo de trabajo: al automatizar la generación y distribución de artefactos
# Aumenta la eficiencia: al reducir el tiempo y esfuerzo necesario para generar y compartir archivos


# tanto los artefactos como los outputs son formas de compartir datos entre trabajos o pasos de un flujo de trabajo, pero tienen propósitos y comportamientos diferentes.
# Artefactos
# Definición: Los artefactos son archivos o colecciones de archivos producidos durante una ejecución de flujo de trabajo que se pueden almacenar y compartir entre trabajos o después de completar el flujo de trabajo.
# Uso: Se utilizan para almacenar y compartir archivos que se generan durante el flujo de trabajo, como resultados de pruebas, informes de cobertura de código, archivos binarios, etc.
# Duración: Los artefactos se almacenan durante un período determinado (por defecto, 90 días) y se pueden eliminar manualmente.
# Acceso: Los artefactos se pueden descargar y acceder desde la interfaz de GitHub.
# Outputs
# Definición: Los outputs son valores que se generan durante la ejecución de un paso o trabajo y se pueden pasar a otros pasos o trabajos dentro del mismo flujo de trabajo.
# Uso: Se utilizan para compartir valores simples, como cadenas de texto, números o variables, entre pasos o trabajos.
# Duración: Los outputs solo están disponibles durante la ejecución del flujo de trabajo y se eliminan al finalizar.
# Acceso: Los outputs se pueden acceder solo dentro del mismo flujo de trabajo y no se pueden descargar o acceder desde la interfaz de GitHub.
# Diferencias clave
# Tipo de datos: Los artefactos almacenan archivos, mientras que los outputs almacenan valores simples.
# Duración: Los artefactos se almacenan durante un período determinado, mientras que los outputs solo están disponibles durante la ejecución del flujo de trabajo.
# Acceso: Los artefactos se pueden descargar y acceder desde la interfaz de GitHub, mientras que los outputs solo se pueden acceder dentro del mismo flujo de trabajo


# se define un output llamado script-file en el trabajo build. Este output se asigna el valor generado por el paso publish mediante la expresión steps.publish.outputs.script-file }
# ¿Cómo se generan los outputs?
# En el paso Publish JS filename, se utiliza el comando find para buscar archivos .js en el directorio dist/assets/ y se escribe el nombre del archivo encontrado en el archivo $GITHUB_OUTPUT con el formato script-file={nombre_del_archivo}.
# El archivo $GITHUB_OUTPUT es un archivo especial en GitHub Actions que permite escribir outputs que se pueden leer posteriormente en el flujo de trabajo.
# ¿Cómo se utilizan los outputs?
# Una vez que se ha generado el output script-file, se puede utilizar en otros pasos o trabajos del flujo de trabajo. En este caso, el output se define en el trabajo build, por lo que se puede utilizar en otros trabajos que dependan de build
# steps: se refiere a los pasos definidos en el trabajo actual.
# publish: es el id del paso que generó el output. En este caso, el paso con el id publish es el que ejecuta el comando find y escribe el output en $GITHUB_OUTPUT.
# outputs: se refiere a los outputs generados por el paso publish.
# script-file: es el nombre del output específico que se generó en el paso publish